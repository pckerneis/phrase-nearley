Phrase {
  main = nl* listOf<macroOrStatement, nl+> nl*

  macroOrStatement = macro | statement | macroCall

  // Statement
  statement = assertion | action

  // Actions
  action = actionOnElement space+ element
        | actionWithString space+ string
  actionOnElement = {{actionOnElementTypes}}
  actionWithString = actionWithStringType
  actionWithStringType = {{actionWithStringTypes}}

  // Assertions
  assertion = "expect" space+ element space+ assertionWithStringType space+ string
  assertionWithStringType = {{assertionWithStringTypes}}

  element = "<" space* multiIdentifier space* ">"
  multiIdentifier = nonemptyListOf<paramOrIdentifier, space+>
  paramOrIdentifier = identifier | identifierParam

  // Macro
  macro = macroHeader nl+ macroBody
  macroHeader = inOrderTo space+ macroIdentifier ":"
  macroIdentifier = identifier (space+ listOf<macroIdentifierFragment, space+>)?
  macroIdentifierFragment = macroParameter -- parameter
    | identifier -- identifier
  macroParameter = "{" identifier "}" -- string
    | identifierParam -- target
  inOrderTo = "in order to"
  macroBody = nonemptyListOf<indentedStatement, emptyLine>
  indentedStatement = indent (statement | macroCall)
  indent = space+

  macroCall = identifier (space+ listOf<macroCallFragment, space+>)?
  macroCallFragment = identifier -- identifier
    | string -- string
    | element -- target

  identifierParam = "$" identifier

  // Lexical rules
  identifier = letter (alnum | "_")*
  string = "\"" char* "\""
  char = escaped | unescaped
  escaped = "\\" validEscape
  validEscape = "\"" | "\\" | "{" | "}"
  unescaped = ~("\"" | "\\") any

  nl = "\n" | "\r\n" | "\r"
  space := ~nl "\x00".."\x20"
  emptyLine = nonemptyListOf<nl, space*>
}
